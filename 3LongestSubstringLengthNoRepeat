class Solution:
	def lengthOfLongestSubstring(self, s: str) -> int:
		if not s:
			return 0
		if len(s)==1:
			return 1
		dic={}
		start=0
		length=0
		for i in range(len(s)):
			if s[i] in dic:
				start=max(start,dic[s[i]]+1)
				#start means the start index of this turn,it may be max(next of last appearence,now start caused by other repeat)
			dic[s[i]]=i
			length=max(length,i-start+1)
			#length represents the longest length till element i,it may be max(last longest length,length from start to this one)
		return length
